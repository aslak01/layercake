{"main":{"slug":"MapLabels.svg.svelte","contents":"<!--\n  @component\n  Adds SVG text labels based features in the data or a custom GeoJSON Feature Collection.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, width, height } = getContext('LayerCake');\n\n  /** @type {Function} projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`. */\n  export let projection;\n\n  /** @type {Function} getLabel – An accessor function to get the field to display. */\n  export let getLabel;\n\n  /** @type {Number} [fixedAspectRatio] – By default, the map fills to fit the $width and $height. If instead you want a fixed-aspect ratio, like for a server-side rendered map, set that here. */\n  export let fixedAspectRatio = undefined;\n\n  /** @type {Function} [getCoordinates=d => d.geometry.coordinates] – An accessor function to get the `[x, y]` coordinate field. Defaults to a GeoJSON feature format. */\n  export let getCoordinates;\n\n  /** @type {Array} [features] – A list of labels as GeoJSON features. If unset, the plotted features will defaults to those in `$data.features`, assuming this field a list of GeoJSON features. */\n  export let features = undefined;\n\n  $: fitSizeRange = fixedAspectRatio ? [100, 100 / fixedAspectRatio] : [$width, $height];\n\n  $: projectionFn = projection()\n    .fitSize(fitSizeRange, $data);\n</script>\n\n<g class=\"map-labels\">\n{#each (features || $data.features) as d}\n  {@const coords = projectionFn(getCoordinates(d))}\n  <text\n    class=\"map-label\"\n    x=\"{coords[0]}\"\n    y=\"{coords[1]}\"\n  >{getLabel(d)}</text>\n{/each}\n</g>\n\n<style>\n  .map-labels {\n    pointer-events: none;\n  }\n  .map-label {\n    color: #333;\n    /* This is small because we're loading it in ScaledSvg so it's actually being zoomed by about 10x */\n    font-size: 1px;\n    text-anchor: middle;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"– A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.","type":{"type":"NameExpression","name":"Function"},"name":"projection"},{"title":"param","description":"– An accessor function to get the field to display.","type":{"type":"NameExpression","name":"Function"},"name":"getLabel"},{"title":"param","description":"– By default, the map fills to fit the $width and $height. If instead you want a fixed-aspect ratio, like for a server-side rendered map, set that here.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"fixedAspectRatio"},{"title":"param","description":"– An accessor function to get the `[x, y]` coordinate field. Defaults to a GeoJSON feature format.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"getCoordinates","default":"d=>d.geometry.coordinates"},{"title":"param","description":"– A list of labels as GeoJSON features. If unset, the plotted features will defaults to those in `$data.features`, assuming this field a list of GeoJSON features.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Array"}},"name":"features"}]},"componentDescription":"Adds SVG text labels based features in the data or a custom GeoJSON Feature Collection.","modules":[]}