{"main":{"slug":"MapLabels.html.svelte","contents":"<!--\n  @component\n  Adds HTML text labels based features in the data or a custom GeoJSON Feature Collection.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, width, height } = getContext('LayerCake');\n\n  /** @type {Function} projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`. */\n  export let projection;\n\n  /** @type {Function} getLabel – An accessor function to get the field to display. */\n  export let getLabel;\n\n  /** @type {Function} [getCoordinates=d => d.geometry.coordinates] – An accessor function to get the `[x, y]` coordinate field. Defaults to a GeoJSON feature format. */\n  export let getCoordinates;\n\n  /** @type {Array} [features] – A list of labels as GeoJSON features. If unset, the plotted features will defaults to those in `$data.features`, assuming this field a list of GeoJSON features. */\n  export let features = undefined;\n\n  $: projectionFn = projection()\n    .fitSize([$width, $height], $data);\n</script>\n\n<div class=\"map-labels\">\n{#each (features || $data.features) as d}\n  {@const coords = projectionFn(getCoordinates(d))}\n  <div\n    class=\"map-label\"\n    style=\"\n      left: {coords[0]}px;\n      top: {coords[1]}px;\n    \"\n  >{getLabel(d)}</div>\n{/each}\n</div>\n\n<style>\n  .map-label {\n    position: absolute;\n    text-align: center;\n    font-size: 8px;\n    color: #333;\n    margin-top: -3px; /* To match the SVG labels, it needs a slight tweak */\n    transform: translate(-50%, -50%);\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/MapLayered"]},{"group":"SSR","matches":["/example-ssr/MapLayered"]}],"hasjsDoctable":true,"jsdocParsed":{"description":"","tags":[{"title":"param","description":"– A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.","type":{"type":"NameExpression","name":"Function"},"name":"projection"},{"title":"param","description":"– An accessor function to get the field to display.","type":{"type":"NameExpression","name":"Function"},"name":"getLabel"},{"title":"param","description":"– An accessor function to get the `[x, y]` coordinate field. Defaults to a GeoJSON feature format.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"getCoordinates","default":"d=>d.geometry.coordinates"},{"title":"param","description":"– A list of labels as GeoJSON features. If unset, the plotted features will defaults to those in `$data.features`, assuming this field a list of GeoJSON features.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Array"}},"name":"features"}]},"componentDescription":"Adds HTML text labels based features in the data or a custom GeoJSON Feature Collection.","modules":[]}