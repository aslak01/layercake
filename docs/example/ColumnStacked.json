{"main":{"title":"+page.svelte","contents":"<script>\n  import { LayerCake, Svg, flatten, uniques, stack } from 'layercake';\n\n  import { scaleBand, scaleOrdinal } from 'd3-scale';\n  import { format } from 'd3-format';\n\n  import ColumnStacked from './_components/ColumnStacked.svelte';\n  import AxisX from './_components/AxisX.svelte';\n  import AxisY from './_components/AxisY.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './_data/fruitOrdinal.csv';\n\n  const xKey = 'year';\n  const yKey = [0, 1];\n  const zKey = 'key';\n\n  const seriesNames = Object.keys(data[0]).filter(d => d !== xKey);\n  const seriesColors = ['#00e047', '#7ceb68', '#b7f486', '#ecfda5'];\n\n  /* --------------------------------------------\n   * Cast data\n   */\n  data.forEach(d => {\n    seriesNames.forEach(name => {\n      d[name] = +d[name];\n    });\n  });\n\n  const formatTickY = d => format(`~s`)(d);\n\n  const stackedData = stack(data, seriesNames);\n</script>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 250px;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n      padding={{ top: 0, right: 0, bottom: 20, left: 20 }}\n      x={d => d.data[xKey]}\n      y={yKey}\n      z={zKey}\n      xScale={scaleBand().paddingInner(0.02).round(true)}\n      xDomain={uniques(data, xKey)}\n      zScale={scaleOrdinal()}\n      zDomain={seriesNames}\n      zRange={seriesColors}\n      flatData={flatten(stackedData)}\n      data={stackedData}\n  >\n    <Svg>\n      <AxisX\n        gridlines={false}\n      />\n      <AxisY\n        ticks={4}\n        gridlines={false}\n        formatTick={formatTickY}\n      />\n      <ColumnStacked/>\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"Stacked column chart using Layer Cake's [stack function](/guide#stack). Because this will create a nested data structure, we use LayerCake's `flatten` function to pass to the `flatData` prop. See the [server-side rendered example](/example-ssr/ColumnStacked) for the basic D3 function usage.\n","components":[{"title":"./_components/ColumnStacked.svelte","contents":"<!--\n  @component\n  Generates an SVG column chart. It uses the z-scale for color assignments and aassumes both `xScale` and `zScale` are ordinal scales.  It assumes your data is in a [D3 stack format](https://github.com/d3/d3-shape#stack\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, zGet, xScale } = getContext('LayerCake');\n</script>\n\n<g class=\"column-group\">\n  {#each $data as series, i}\n    {#each series as d}\n      {@const yVals = $yGet(d)}\n      {@const columnHeight = yVals[0] - yVals[1]}\n      <rect\n        class='group-rect'\n        data-id=\"{i}\"\n        x=\"{$xGet(d)}\"\n        y=\"{yVals[1]}\"\n        width={$xScale.bandwidth()}\n        height=\"{columnHeight}\"\n        fill={$zGet(series)}\n      ></rect>\n    {/each}\n  {/each}\n</g>"},{"title":"./_components/AxisX.svelte","contents":"<!--\n  @component\n  Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  /** @type {Boolean} [gridlines=true] - Extend lines from the ticks into the chart space */\n  export let gridlines = true;\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Boolean} [baseline=false] â€“ Show a solid line at the bottom. */\n  export let baseline = false;\n\n  /** @type {Boolean} [snapTicks=false] - Instead of centering the text on the first and the last items, align them to the edges of the chart. */\n  export let snapTicks = false;\n\n  /** @type {Function} [formatTick=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let formatTick = d => d;\n\n  /** @type {Number|Array|Function} [ticks] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function. */\n  export let ticks = undefined;\n\n  /** @type {Number} [xTick=0] - How far over to position the text marker. */\n  export let xTick = 0;\n\n  /** @type {Number} [yTick=16] - The distance from the baseline to place each tick value. */\n  export let yTick = 16;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class=\"axis x-axis\" class:snapTicks>\n  {#each tickVals as tick, i (tick)}\n    <g class=\"tick tick-{i}\" transform=\"translate({$xScale(tick)},{Math.max(...$yRange)})\">\n      {#if gridlines !== false}\n        <line class=\"gridline\" y1={$height * -1} y2=\"0\" x1=\"0\" x2=\"0\" />\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class=\"tick-mark\"\n          y1={0}\n          y2={6}\n          x1={isBandwidth ? $xScale.bandwidth() / 2 : 0}\n          x2={isBandwidth ? $xScale.bandwidth() / 2 : 0}\n        />\n      {/if}\n      <text\n        x={isBandwidth ? ($xScale.bandwidth() / 2 + xTick) : xTick}\n        y={yTick}\n        dx=\"\"\n        dy=\"\"\n        text-anchor={textAnchor(i)}>{formatTick(tick)}</text\n      >\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1={$height + 0.5} y2={$height + 0.5} x1=\"0\" x2={$width} />\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: 0.725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapTicks .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapTicks .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./_components/AxisY.svelte","contents":"<!--\n  @component\n  Generates an SVG y-axis. This component is also configured to detect if your y-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n -->\n<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  /** @type {Boolean} [gridlines=true] - Extend lines from the ticks into the chart space */\n  export let gridlines = true;\n\n  /** @type {Boolean} [tickMarks=false] - Show a vertical mark for each tick. */\n  export let tickMarks = false;\n\n  /** @type {Function} [formatTick=d => d] - A function that passes the current tick value and expects a nicely formatted value in return. */\n  export let formatTick = d => d;\n\n  /** @type {Number|Array|Function} [ticks=4] - If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. */\n  export let ticks = 4;\n\n  /** @type {Number} [xTick=0] - How far over to position the text marker. */\n  export let xTick = 0;\n\n  /** @type {Number} [yTick=0] - How far up and down to position the text marker. */\n  export let yTick = 0;\n\n  /** @type {Number} [dxTick=0] - Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal. */\n  export let dxTick = 0;\n\n  /** @type {Number} [dyTick=-4] - Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal. */\n  export let dyTick = -4;\n\n  /** @type {String} [textAnchor='start'] The CSS `text-anchor` passed to the label. This is automatically set to \"end\" if the scale has a bandwidth method, like in ordinal scales. */\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick (tick)}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          class=\"gridline\"\n          x2='100%'\n          y1={(isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={(isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class='tick-mark'\n          x1='0'\n          x2='{isBandwidth ? -6 : 6}'\n          y1={(isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={(isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{(isBandwidth ? ($yScale.bandwidth() / 2) + yTick : yTick)}'\n        dx='{isBandwidth ? -9 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./_data/fruitOrdinal.csv","contents":"year,apples,bananas,cherries,dates\n2019,3840,1920,960,400\n2018,1600,1440,960,400\n2017,820,1000,640,400\n2016,820,560,720,400"}],"jsons":[]}
